name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'resources/js/**'
      - 'resources/css/**'
      - 'package*.json'
      - 'vite.config.js'
      - 'tsconfig.json'
      - 'jest.config.cjs'
      - 'eslint.config.js'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'resources/js/**'
      - 'resources/css/**'
      - 'package*.json'
      - 'vite.config.js'
      - 'tsconfig.json'
      - 'jest.config.cjs'
      - 'eslint.config.js'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npm run type-check
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        
    - name: Build project
      run: npm run build
      
    - name: Bundle analysis
      if: matrix.node-version == '20.x'
      run: npm run build:report
      
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate
      continue-on-error: true
      
  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for performance analysis
      run: npm run build:analyze
      
    - name: Bundle size check
      run: |
        echo "📊 Bundle Analysis Results:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lah public/build/assets/ | grep -E '\.(js|css)$' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
        # Check bundle size limits
        JS_SIZE=$(du -b public/build/assets/*.js | awk '{sum += $1} END {print sum}')
        CSS_SIZE=$(du -b public/build/assets/*.css | awk '{sum += $1} END {print sum}')
        
        echo "JS Bundle Size: $(($JS_SIZE / 1024))KB" >> $GITHUB_STEP_SUMMARY
        echo "CSS Bundle Size: $(($CSS_SIZE / 1024))KB" >> $GITHUB_STEP_SUMMARY
        
        # Fail if bundles are too large
        if [ $JS_SIZE -gt 1048576 ]; then # 1MB limit for JS
          echo "❌ JavaScript bundle too large: $(($JS_SIZE / 1024))KB > 1MB"
          exit 1
        fi
        
        if [ $CSS_SIZE -gt 524288 ]; then # 512KB limit for CSS
          echo "❌ CSS bundle too large: $(($CSS_SIZE / 1024))KB > 512KB"
          exit 1
        fi
        
        echo "✅ Bundle sizes within limits"